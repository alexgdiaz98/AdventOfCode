inp = [3,225,1,225,6,6,1100,1,238,225,104,0,1101,91,67,225,1102,67,36,225,1102,21,90,225,2,13,48,224,101,-819,224,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,1101,62,9,225,1,139,22,224,101,-166,224,224,4,224,1002,223,8,223,101,3,224,224,1,223,224,223,102,41,195,224,101,-2870,224,224,4,224,1002,223,8,223,101,1,224,224,1,224,223,223,1101,46,60,224,101,-106,224,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1001,191,32,224,101,-87,224,224,4,224,102,8,223,223,1001,224,1,224,1,223,224,223,1101,76,90,225,1101,15,58,225,1102,45,42,224,101,-1890,224,224,4,224,1002,223,8,223,1001,224,5,224,1,224,223,223,101,62,143,224,101,-77,224,224,4,224,1002,223,8,223,1001,224,4,224,1,224,223,223,1101,55,54,225,1102,70,58,225,1002,17,80,224,101,-5360,224,224,4,224,102,8,223,223,1001,224,3,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,677,677,224,102,2,223,223,1005,224,329,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,344,101,1,223,223,107,677,226,224,1002,223,2,223,1006,224,359,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,374,1001,223,1,223,108,226,677,224,1002,223,2,223,1006,224,389,101,1,223,223,7,226,677,224,102,2,223,223,1006,224,404,1001,223,1,223,1108,677,677,224,1002,223,2,223,1005,224,419,101,1,223,223,1008,226,677,224,102,2,223,223,1006,224,434,101,1,223,223,107,226,226,224,102,2,223,223,1005,224,449,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,464,1001,223,1,223,1007,226,226,224,1002,223,2,223,1005,224,479,101,1,223,223,1008,226,226,224,102,2,223,223,1006,224,494,1001,223,1,223,8,226,226,224,102,2,223,223,1006,224,509,101,1,223,223,1107,677,677,224,102,2,223,223,1005,224,524,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,539,101,1,223,223,1107,677,226,224,1002,223,2,223,1006,224,554,101,1,223,223,1007,677,226,224,1002,223,2,223,1005,224,569,101,1,223,223,7,677,226,224,1002,223,2,223,1006,224,584,101,1,223,223,107,677,677,224,1002,223,2,223,1005,224,599,1001,223,1,223,8,226,677,224,1002,223,2,223,1005,224,614,101,1,223,223,7,677,677,224,1002,223,2,223,1006,224,629,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,644,101,1,223,223,108,226,226,224,102,2,223,223,1005,224,659,1001,223,1,223,8,677,226,224,1002,223,2,223,1005,224,674,101,1,223,223,4,223,99,226]
halt = False
PC = 0

'''
Returns a list of the first n parameters in the proper mode.

NOTE: Do not use for write back parameters
'''
def getParams(instruction, n):
    params = []
    for i in range(n):
        if instruction[-3-i:-2-i] == '0': # Postion Mode
            params.append(inp[inp[PC+i+1]])
        elif instruction[-3-i:-2-i] == '1': # Immediate Mode
            params.append(inp[PC+i+1])
    return params

while not halt:
    instruction = str(inp[PC]).zfill(5) # Ensures instruction is at least 5 digits long
    
    # Halt Opcode
    if instruction[-2:] == '99':
        halt = True
        PC += 4
    # Add Opcode
    elif instruction[-2:] == '01':
        val = 0
        param1, param2 = getParams(instruction, 2)
        param3 = inp[PC+3] # Store Address must be mode 0
        inp[param3] = param1 + param2
        PC += 4
    # Multiply Opcode
    elif instruction[-2:] == '02':
        val = 0
        param1, param2 = getParams(instruction, 2)
        param3 = inp[PC+3] # Store Address must be mode 0
        inp[param3] = param1 * param2
        PC += 4
    # Store Input Opcode
    elif instruction[-2:] == '03':
        val = int(input('input: '))
        param = inp[PC+1]
        if instruction[-3:-2] == '0': # Param Position Mode
            inp[param] = val
        PC += 2
    # Output Opcode
    elif instruction[-2:] == '04':
        param = getParams(instruction, 1)[0]
        print('output:', param)
        PC += 2
    # Jump-If-True Opcode
    elif instruction[-2:] == '05':
        param1, param2 = getParams(instruction, 2)
        if param1 != 0:
            PC = param2
        else:
            PC += 3
    # Jump-If-False Opcode
    elif instruction[-2:] == '06':
        param1, param2 = getParams(instruction, 2)
        if param1 == 0:
            PC = param2
        else:
            PC += 3
    # Less Than Opcode
    elif instruction[-2:] == '07':
        param1, param2 = getParams(instruction, 2)
        param3 = inp[PC+3] # Store Address must be mode 0
        if param1 < param2:
            inp[param3] = 1
        else:
            inp[param3] = 0
        PC += 4
    # Equals Opcde
    elif instruction[-2:] == '08':
        param1, param2 = getParams(instruction, 2)
        param3 = inp[PC+3] # Store Address must be mode 0
        if param1 == param2:
            inp[param3] = 1
        else:
            inp[param3] = 0
        PC += 4
    # Opcode not recognized
    else:
        print('Invalid Instruction', instruction)
        halt = True